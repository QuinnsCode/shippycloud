datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model User {
  id                  String               @id @default(uuid())
  name                String?
  email               String               @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  profilePicUrl       String?
  userSettings        String?              @default("")
  roles               String[]             @default(["user"])
  memberships         OrganizationMember[] // One user can belong to multiple tenants
}

model OrganizationMember {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           String // e.g., 'ADMIN', 'MEMBER', 'OWNER'
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId]) // Each user can only have one role per tenant
}

model Organization {
  id                String               @id @default(uuid())
  name              String
  domain            String?              @unique // Optional: for domain-based identification
  members           OrganizationMember[] // Many users can belong to one tenant
  webhooksEventLogs WebhookEventLog[] // Example of tenant-specific data
  orderData         OrderData[] // Example of tenant-specific data
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model WebhookEventLog {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  event          String
  source         String
  payload        String
  createdAt      DateTime     @default(now())
}

model OrderData {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  orderId        String?
  data           String
  createdAt      DateTime     @default(now())
}
